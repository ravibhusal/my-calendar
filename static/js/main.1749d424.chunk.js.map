{"version":3,"sources":["helpers/helpers.tsx","components/calendar/YearSelect.tsx","components/calendar/MonthSelect.tsx","components/calendar/DateSelect.tsx","custom_hooks/UseEffectUpdate.tsx","components/calendar/index.tsx","components/datepicker/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["helpers","formatElementsForTable","list","numberOfElementsInARow","cells","rows","forEach","row","i","push","length","map","d","className","YearSelect","props","selectedYearRef","useRef","useEffect","current","scrollIntoView","behavior","onYearSelect","event","year","currentTarget","getAttribute","yearList","parseInt","currentYear","selectedYear","ref","data-year","onClick","e","MonthSelect","monthList","month","index","classesToAdd","selectedMonth","data-month","onMonthSelect","DateSelect","weekdaysShortName","currentDate","format","selectedDate","onDateSelect","day","daysInTheMonth","totalDaysInAMonth","classToAdd","selectedDay","formattedDate","dayjs","data-date","blankDays","firstDayOfTheMonth","$W","totalSlots","renderDates","useEffectUpdate","func","deps","isFirstRun","extend","customParseFormat","Calendar","useState","setDay","setMonth","setYear","daysInMonth","setTotalDaysInAMonth","startOf","setfirstDayOfTheMonth","showYears","toggleShowYears","showMonths","toggleShowMonths","showDates","toggleShowDates","newDateSelected","toggleNewDateSelected","selectedMonthAbbr","console","log","DatePicker","showCalendar","toggleShowCalendar","setSelectedDate","name","autoComplete","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1749d424.chunk.js","sourcesContent":["import React from 'react'\n\nconst helpers = {\n  formatElementsForTable: function(list: Array<Element>, numberOfElementsInARow: number): Array<Element>{\n    var cells: Array<any> = [];\n    var rows: Array<any> = [];\n  \n    list.forEach((row: Element, i: number) => {\n      if (i % numberOfElementsInARow !== 0) {\n        cells.push(row);\n      } else {\n        rows.push(cells);\n        cells = [];\n        cells.push(row);\n      }\n      if (i === list.length - 1) {\n        rows.push(cells);\n      }\n    });\n  \n    let elements: Array<any> = []\n  \n    elements = rows.map((d: Element) => {\n      return <tr className=\"flex w-full\">{d}</tr>;\n    });\n\n    return elements;\n  }\n}\n\nexport default helpers","import React, {useRef, useEffect} from 'react';\nimport helpers from '../../helpers/helpers';\n\ninterface YearSelectProps{\n  currentYear: string;\n  selectedYear: string;\n  onYearSelect: (year: string) => void\n}\nfunction YearSelect(props: YearSelectProps): JSX.Element{\n\n  const selectedYearRef = useRef<any>();\n\n  const scrollToBottom = () :void => {\n    selectedYearRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    if(selectedYearRef.current){\n      scrollToBottom();\n    }\n  }, [selectedYearRef])\n\n  const onYearSelect = (event: React.MouseEvent<HTMLElement>): void =>{\n    let year: string|any = event.currentTarget.getAttribute(\"data-year\");\n    props.onYearSelect(year);\n  }\n\n  let yearList: Array<any> = [];\n  for ( var i = parseInt(props.currentYear) - 20; i <= parseInt(props.currentYear) + 20; i ++ ){\n    if(i === parseInt(props.selectedYear)){\n      yearList.push(<td key={i} ref={selectedYearRef} data-year={i} className={` bg-red-500 rounded-full w-1/3`} onClick={ e =>{\n        onYearSelect(e)\n      }}>{i}</td>)\n    }\n    else{\n      yearList.push(<td key={i} data-year={i} className={` hover:bg-red-200 rounded-full w-1/3`} onClick={ e =>{\n        onYearSelect(e)\n      }}>{i}</td>)\n    }\n  }\n\n  const renderYears = () => {\n    return helpers.formatElementsForTable(yearList, 3);\n  }\n\n  return(\n    <table className=\"table-fixed w-full text-center shadow-lg\">\n      <thead className=\"flex w-full bg-red-200\">\n        <tr className=\"flex justify-center w-full\">\n          <th>Year</th>\n        </tr>\n      </thead>\n      <tbody className=\"flex flex-col items-center justify-between h-52 overflow-y-scroll w-full\">{renderYears()}</tbody>\n    </table>\n  );\n}\n\nexport default YearSelect;","import React from 'react';\nimport helpers from '../../helpers/helpers';\ninterface MonthSelectProps{\n  selectedMonth: string;\n  onMonthSelect: (month: string) => void\n}\n\nfunction MonthSelect(props: MonthSelectProps): JSX.Element{\n\n  const months: Array<String> = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\n  \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n\n  const onMonthSelect = (event: React.MouseEvent<HTMLElement>): void=> {\n    let month: string|any = event.currentTarget.getAttribute('data-month');\n    props.onMonthSelect(month);\n  }\n\n  let monthList: Array<any> = months.map((month, index) => {\n    var classesToAdd: string = index + 1 === parseInt(props.selectedMonth) ? \"bg-red-500\" : \"hover:bg-red-200\"\n    return <td data-month= {index + 1} className={` rounded-full w-1/3 ${classesToAdd}`} onClick={ e =>{\n      onMonthSelect(e)\n    }}>{month}</td>;\n  })\n\n  const renderMonths = () => {\n    return helpers.formatElementsForTable(monthList, 3);\n  }\n\n  return(\n    <table className=\"table-fixed w-full text-center shadow-lg\">\n      <thead className=\"flex w-full bg-red-200\">\n        <tr className=\"flex justify-center w-full\">\n          <th>Month</th>\n        </tr>\n      </thead>\n      <tbody className=\"flex flex-col items-center justify-between h-52 pb-4 px-2 w-full\">{renderMonths()}</tbody>\n    </table>\n  )\n}\n\nexport default MonthSelect;","import React from 'react'\nimport dayjs, { Dayjs } from 'dayjs'\nimport helpers from '../../helpers/helpers'\n\n\n\ninterface DateSelectProps{\n  currentDate: Dayjs;\n  selectedDate: Dayjs;\n  selectedDay: string;\n  selectedMonth: string;\n  selectedYear: string;\n  totalDaysInAMonth: number;\n  firstDayOfTheMonth: any;\n  onDateSelect: (day: string) => void\n}\nfunction DateSelect(props: DateSelectProps): JSX.Element{\n\n  const weekdaysShortName: Array<String> = ['Sun','Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n  const currentDate: string = props.currentDate.format('YYYY/M/D');\n  const selectedDate: string = props.selectedDate.format('YYYY/M/D');\n\n  const onDateSelect = (event: React.MouseEvent<HTMLElement>): void => {\n    var day: string|any = event.currentTarget.getAttribute('data-date');\n    props.onDateSelect(day);\n  }\n\n  const renderWeekNames = () =>{\n    var weekNames: Array<any> = [];\n    weekNames = weekdaysShortName.map(day => {\n      return <th className=\"w-1/7 p-1\">{day}</th>;\n    })\n    return weekNames;\n  }\n\n  const renderDates = () =>{\n    var daysInTheMonth: Array<any> = [];\n    \n    for(let i: number = 1; i <= props.totalDaysInAMonth; i++){\n      var classToAdd: string = i === parseInt(props.selectedDay) ? \"\": \"hover:bg-red-200\"\n      var formattedDate: string = dayjs(`${props.selectedYear}/${props.selectedMonth}/${i}}`).format('YYYY/M/D');\n\n      classToAdd += formattedDate === currentDate ? \" text-red-300 \" : \"\";\n      classToAdd += formattedDate == selectedDate ? \"bg-red-500\" : \"\"\n      \n      daysInTheMonth.push(<td key={i} data-date={i} data-month={props.selectedMonth} data-year={props.selectedYear} className={` rounded-full w-1/6 p-1 ${classToAdd}`} onClick = {e => {\n        {onDateSelect(e)}\n      }}>{i}</td>)\n    }\n\n    var blankDays: Array<any> = [];\n\n    for (let i: number = 0; i < parseInt(props.firstDayOfTheMonth.$W); i++) {\n      blankDays.push(<td className=\"w-1/6 p-1\">{\" \"}</td>);\n    }\n\n    var totalSlots: Array<any> = [...blankDays, ...daysInTheMonth];\n    return helpers.formatElementsForTable(totalSlots, 7);\n  }\n\n  return(\n    <table className=\"table-auto w-full text-center shadow-lg\">\n      <thead className=\"flex w-full bg-red-200\">\n        <tr className=\"flex justify-center w-full\">\n          {renderWeekNames()}\n        </tr>\n      </thead>\n      <tbody className=\"flex flex-col items-center justify-between h-52 w-full\">\n        {renderDates()}\n      </tbody>\n    </table>\n  )\n}\n\nexport default DateSelect;","import React, { useEffect, useRef } from 'react';\n\nconst useEffectUpdate = (func:any, deps: any): void => {\n    const isFirstRun = useRef<boolean>(false);\n\n    useEffect(() => {\n        if (isFirstRun.current) func();\n        else isFirstRun.current = true;\n    }, deps);\n}\n\nexport default useEffectUpdate;","import React, { useState, useEffect, useRef } from 'react';\nimport YearSelect from './YearSelect';\nimport MonthSelect from './MonthSelect';\nimport DateSelect from './DateSelect';\n\nimport useEffectUpdate from '../../custom_hooks/UseEffectUpdate'\n\nimport dayjs, { Dayjs } from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(customParseFormat);\n\ninterface CalendaProps{\n  currentDate: Dayjs;\n  selectedDate: Dayjs;\n  onDateSelect: (selectedDay: string, selectedMonth: string, selectedYear: string) => void;\n}\n\nfunction Calendar(props: CalendaProps): JSX.Element{\n\n  const currentYear = props.currentDate.format('YYYY');\n  const [selectedDay, setDay] = useState<string>(props.selectedDate.format('D'));\n  const [selectedMonth, setMonth] = useState<string>(props.selectedDate.format('M'));\n  const [selectedYear, setYear] = useState<string>(props.selectedDate.format('YYYY'));\n\n  const [totalDaysInAMonth, setTotalDaysInAMonth] = useState<number>(props.selectedDate.daysInMonth());\n  const [firstDayOfTheMonth, setfirstDayOfTheMonth] = useState<Dayjs>(props.selectedDate.startOf('month'));\n\n  const[showYears, toggleShowYears] = useState<Boolean>(false)\n  const[showMonths, toggleShowMonths] = useState<Boolean>(false)\n  const[showDates, toggleShowDates] = useState<Boolean>(true)\n  \n  const[newDateSelected, toggleNewDateSelected] = useState<Boolean>(false)\n\n  const selectedMonthAbbr: string = dayjs().month(parseInt(selectedMonth) - 1).format('MMM');\n\n\n  useEffect(() =>{\n    if(showYears){\n      toggleShowDates(false);\n      toggleShowMonths(false);\n    }\n\n    if(!showYears && !showMonths)\n      toggleShowDates(true);\n\n  }, [showYears])\n\n  useEffect(() =>{\n    if(showMonths){\n      toggleShowDates(false);\n      toggleShowYears(false);\n    }\n\n    if(!showYears && !showMonths)\n      toggleShowDates(true);\n\n  }, [showMonths])\n\n  useEffect(() =>{\n    if(showDates){\n      toggleShowMonths(false);\n      toggleShowYears(false);\n    }\n  }, [showDates])\n\n\n  useEffectUpdate(() => {\n    props.onDateSelect(selectedDay, selectedMonth, selectedYear);\n  }, [newDateSelected]);\n\n  useEffectUpdate(() => {\n    console.log(totalDaysInAMonth)\n    setTotalDaysInAMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).daysInMonth());\n    setfirstDayOfTheMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).startOf('month'));\n  }, [selectedYear]);\n\n  useEffectUpdate(() => {\n    setTotalDaysInAMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).daysInMonth());\n    setfirstDayOfTheMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).startOf('month'));\n  }, [selectedMonth]);\n\n  const onDateSelect = (day: string): void => {\n    setDay(day)\n    toggleNewDateSelected(true);\n  }\n\n  const onMonthSelect = (month: string): void => {\n    setMonth(month);\n    toggleShowMonths(false)\n    toggleShowDates(true)\n  }\n\n  const onYearSelect = (year: string): void => {\n    setYear(year)\n    toggleShowDates(true)\n  }  \n\n  return(\n    <div className=\"flex flex-col\">  \n      <div className=\"flex justify-center w-full p-1\">\n        <button className=\"p-1.5 shadow-lg\" onClick={e => {\n          toggleShowMonths(!showMonths)\n          }}>{selectedMonthAbbr}\n          </button>\n          \n        <button className=\"p-1.5 shadow-lg border-red-250\" onClick={e => {\n          toggleShowYears(!showYears)\n          }}>{selectedYear}\n          </button>\n      </div>\n\n      {showDates && <DateSelect currentDate = {props.currentDate} selectedDate={props.selectedDate} selectedDay={selectedDay} selectedMonth={selectedMonth} selectedYear={selectedYear} totalDaysInAMonth={totalDaysInAMonth} firstDayOfTheMonth={firstDayOfTheMonth} onDateSelect={onDateSelect}/>}\n      {showMonths && <MonthSelect selectedMonth={selectedMonth} onMonthSelect= {onMonthSelect}/>}\n      {showYears && <YearSelect currentYear = {currentYear} selectedYear={selectedYear} onYearSelect={onYearSelect}/>}\n    </div>\n  );\n}\n\nexport default Calendar;","import React, {useState, useEffect} from 'react'\nimport Calendar from '../calendar'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\n\ndayjs.extend(customParseFormat)\n\nfunction DatePicker(): JSX.Element{\n\n  const [showCalendar, toggleShowCalendar] = useState<Boolean>(false)\n\n  const currentDate = dayjs();\n  const [selectedDate, setSelectedDate] = useState(currentDate)\n\n  const onDateSelect = (day: string, month: string, year: string) =>{\n    setSelectedDate(dayjs(`${year}-${month}-${day}`, \"YYYY/M/D\"))\n    toggleShowCalendar(!showCalendar)\n  }\n  return (\n    <div className=\"w-64\">\n      <input name=\"date\" className = \"bg-red-200 h-8 rounded-lg p-2 w-full\" autoComplete=\"off\" value={selectedDate.format(\"YYYY/M/D\")} onClick = { e => {\n        toggleShowCalendar(!showCalendar)\n      }} />\n      {showCalendar && <Calendar currentDate={currentDate} selectedDate={selectedDate} onDateSelect = {onDateSelect}/>}\n    </div>\n  )\n}\n\nexport default DatePicker;","import React from 'react';\nimport DatePicker from './components/datepicker'\n\nfunction App() {\n  \n  return (\n    <div className=\"flex container mt-10 justify-center\">\n      <DatePicker/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}