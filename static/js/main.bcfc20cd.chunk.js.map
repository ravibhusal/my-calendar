{"version":3,"sources":["helpers/helpers.tsx","components/calendar/YearSelect.tsx","components/calendar/MonthSelect.tsx","components/calendar/DateSelect.tsx","custom_hooks/UseEffectUpdate.tsx","components/calendar/index.tsx","components/datepicker/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["helpers","formatElementsForTable","list","numberOfElementsInARow","cells","rows","forEach","row","i","push","length","YearSelect","props","selectedYearRef","useRef","useEffect","current","scrollIntoView","behavior","onYearSelect","event","year","currentTarget","getAttribute","yearList","parseInt","currentYear","selectedYear","ref","data-year","className","onClick","e","map","d","MonthSelect","monthList","month","index","classesToAdd","selectedMonth","data-month","onMonthSelect","DateSelect","weekdaysShortName","currentDate","format","selectedDate","onDateSelect","day","daysInTheMonth","totalDaysInAMonth","classToAdd","selectedDay","formattedDate","dayjs","data-date","blankDays","firstDayOfTheMonth","$W","totalSlots","renderDates","useEffectUpdate","func","deps","isFirstRun","extend","customParseFormat","Calendar","useState","setDay","setMonth","setYear","daysInMonth","setTotalDaysInAMonth","startOf","setfirstDayOfTheMonth","showYears","toggleShowYears","showMonths","toggleShowMonths","showDates","toggleShowDates","newDateSelected","toggleNewDateSelected","selectedMonthAbbr","console","log","DatePicker","showCalendar","toggleShowCalendar","setSelectedDate","name","autoComplete","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcfc20cd.chunk.js","sourcesContent":["import React from 'react'\n\nconst helpers = {\n  formatElementsForTable: function(list: Array<Element>, numberOfElementsInARow: number): Array<Element>{\n    var cells: Array<any> = [];\n    var rows: Array<any> = [];\n  \n    list.forEach((row: Element, i: number) => {\n      if (i % numberOfElementsInARow !== 0) {\n        cells.push(row);\n      } else {\n        rows.push(cells);\n        cells = [];\n        cells.push(row);\n      }\n      if (i === list.length - 1) {\n        rows.push(cells);\n      }\n    });\n  \n    return rows;\n  }\n}\n\nexport default helpers","import React, {useRef, useEffect} from 'react';\nimport helpers from '../../helpers/helpers';\n\ninterface YearSelectProps{\n  currentYear: string;\n  selectedYear: string;\n  onYearSelect: (year: string) => void\n}\nfunction YearSelect(props: YearSelectProps): JSX.Element{\n\n  const selectedYearRef = useRef<any>();\n\n  const scrollToBottom = () :void => {\n    selectedYearRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    if(selectedYearRef.current){\n      scrollToBottom();\n    }\n  }, [selectedYearRef])\n\n  const onYearSelect = (event: React.MouseEvent<HTMLElement>): void =>{\n    let year: string|any = event.currentTarget.getAttribute(\"data-year\");\n    props.onYearSelect(year);\n  }\n\n  let yearList: Array<any> = [];\n  for ( var i = parseInt(props.currentYear) - 20; i <= parseInt(props.currentYear) + 20; i ++ ){\n    if(i === parseInt(props.selectedYear)){\n      yearList.push(<td key={i} ref={selectedYearRef} data-year={i} className={` bg-black text-white rounded-full w-12 h-12 pt-2.5`} onClick={ e =>{\n        onYearSelect(e)\n      }}>{i}</td>)\n    }\n    else{\n      yearList.push(<td key={i} data-year={i} className={` hover:bg-gray-200 rounded-full w-12 h-12 pt-2.5`} onClick={ e =>{\n        onYearSelect(e)\n      }}>{i}</td>)\n    }\n  }\n\n  const renderYears = () => {\n    let rows: Array<any> = helpers.formatElementsForTable(yearList, 3);\n  \n    let elements: Array<any> = [];\n\n    elements = rows.map((d: Array<any>, i: number) => {\n      if(d.length > 0 && d.length < 3) {\n        for(let i: number = d.length; i < 3; i++) {\n          d.push(<td className=\"w-12 h-12 pt-2.5\">{\"\"}</td>);\n        }\n      }\n      return <tr className={`flex justify-between w-full`}>{d}</tr>;\n    });\n\n    return elements;\n  }\n\n  return(\n    <table className=\"table-fixed w-full text-center shadow-lg\">\n      <thead className=\"flex w-full bg-white\">\n        <tr className=\"flex justify-center w-full\">\n          <th className=\"p-1 font-medium text-xs text-gray-400\">Select a Year</th>\n        </tr>\n      </thead>\n      <hr/>\n      <tbody className=\"flex flex-col items-center justify-between h-64 pb-0.5 px-4 overflow-y-scroll w-full\">{renderYears()}</tbody>\n    </table>\n  );\n}\n\nexport default YearSelect;","import React from 'react';\nimport helpers from '../../helpers/helpers';\ninterface MonthSelectProps{\n  selectedMonth: string;\n  onMonthSelect: (month: string) => void\n}\n\nfunction MonthSelect(props: MonthSelectProps): JSX.Element{\n\n  const months: Array<String> = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\n  \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n\n  const onMonthSelect = (event: React.MouseEvent<HTMLElement>): void=> {\n    let month: string|any = event.currentTarget.getAttribute('data-month');\n    props.onMonthSelect(month);\n  }\n\n  let monthList: Array<any> = months.map((month, index) => {\n    var classesToAdd: string = index + 1 === parseInt(props.selectedMonth) ? \"bg-black text-white\" : \"hover:bg-gray-200\"\n    return <td data-month= {index + 1} className={` rounded-full w-12 h-12 pt-2.5 ${classesToAdd}`} onClick={ e =>{\n      onMonthSelect(e)\n    }}>{month}</td>;\n  })\n\n  const renderMonths = () => {\n    var rows: Array<any> = helpers.formatElementsForTable(monthList, 3);\n  \n    let elements: Array<any> = [];\n    elements = rows.map((d: Element) => {\n      return <tr className={`flex justify-between w-full`}>{d}</tr>;\n    });\n\n    return elements;\n  }\n\n  return(\n    <table className=\"table-fixed w-full text-center shadow-lg\">\n      <thead className=\"flex w-full bg-white\">\n        <tr className=\"flex justify-center w-full\">\n          <th className=\"p-1 font-medium text-xs text-gray-400\">Select a Month</th>\n        </tr>\n      </thead>\n      <hr/>\n      <tbody className=\"flex flex-col items-center h-52 pt-3 px-2 w-full\">{renderMonths()}</tbody>\n    </table>\n  )\n}\n\nexport default MonthSelect;","import React from 'react'\nimport dayjs, { Dayjs } from 'dayjs'\nimport helpers from '../../helpers/helpers'\n\n\n\ninterface DateSelectProps{\n  currentDate: Dayjs;\n  selectedDate: Dayjs;\n  selectedDay: string;\n  selectedMonth: string;\n  selectedYear: string;\n  totalDaysInAMonth: number;\n  firstDayOfTheMonth: any; // See line: 55\n  onDateSelect: (day: string) => void\n}\nfunction DateSelect(props: DateSelectProps): JSX.Element{\n\n  const weekdaysShortName: Array<String> = ['Su','Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n\n  const currentDate: string = props.currentDate.format('YYYY/M/D');\n  const selectedDate: string = props.selectedDate.format('YYYY/M/D');\n\n  const onDateSelect = (event: React.MouseEvent<HTMLElement>): void => {\n    var day: string|any = event.currentTarget.getAttribute('data-date');\n    props.onDateSelect(day);\n  }\n\n  const renderWeekNames = () =>{\n    var weekNames: Array<any> = [];\n    weekNames = weekdaysShortName.map(day => {\n      return <th className=\"w-10 p-1 font-medium text-xs text-gray-400 \">{day}</th>;\n    })\n    return weekNames;\n  }\n\n  const renderDates = () =>{\n    var daysInTheMonth: Array<any> = [];\n    \n    for(let i: number = 1; i <= props.totalDaysInAMonth; i++){\n      var classToAdd: string = i === parseInt(props.selectedDay) ? \"\": \"hover:bg-gray-200\"\n      var formattedDate: string = dayjs(`${props.selectedYear}/${props.selectedMonth}/${i}}`).format('YYYY/M/D');\n\n      classToAdd += formattedDate === currentDate ? \" text-gray-300 \" : \"\";\n      classToAdd += formattedDate == selectedDate ? \"bg-black text-white\" : \"\"\n      \n      daysInTheMonth.push(<td key={i} data-date={i} data-month={props.selectedMonth} data-year={props.selectedYear} className={` rounded-full h-10 w-10 pt-1.5 ${classToAdd}`} onClick = {e => {\n        {onDateSelect(e)}\n      }}>{i}</td>)\n    }\n\n    var blankDays: Array<any> = [];\n\n    // TODO: Find the correct api for the first day of the month in dayjs library and fix\n    // firstDayOfTheMonth.$W. startOf('month').format(\"W\") apparently doesn't work.\n    for (let i: number = 0; i < parseInt(props.firstDayOfTheMonth.$W); i++) {\n      blankDays.push(<td className=\"w-10\">{\" \"}</td>);\n    }\n\n    var totalSlots: Array<any> = [...blankDays, ...daysInTheMonth];\n\n    let rows: Array<any> = helpers.formatElementsForTable(totalSlots, 7);\n  \n    let elements: Array<any> = [];\n    elements = rows.map((d: Element) => {\n      return <tr className={`flex w-full`}>{d}</tr>;\n    });\n\n    return elements;\n  }\n\n  return(\n    <table className=\"table-fixed w-full text-center shadow-lg\">\n      <thead className=\"flex w-full bg-white\">\n        <tr className=\"flex justify-center w-full\">\n          {renderWeekNames()}\n        </tr>\n      </thead>\n      <hr/>\n      <tbody className=\"flex flex-col items-center justify-between h-64 w-full pt-1 pl-1\">\n        {renderDates()}\n      </tbody>\n    </table>\n  )\n}\n\nexport default DateSelect;","import React, { useEffect, useRef } from 'react';\n\nconst useEffectUpdate = (func:any, deps: any): void => {\n    const isFirstRun = useRef<boolean>(false);\n\n    useEffect(() => {\n        if (isFirstRun.current) func();\n        else isFirstRun.current = true;\n    }, deps);\n}\n\nexport default useEffectUpdate;","import React, { useState, useEffect, useRef } from 'react';\nimport YearSelect from './YearSelect';\nimport MonthSelect from './MonthSelect';\nimport DateSelect from './DateSelect';\n\nimport useEffectUpdate from '../../custom_hooks/UseEffectUpdate'\n\nimport dayjs, { Dayjs } from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\ndayjs.extend(customParseFormat);\n\ninterface CalendaProps{\n  currentDate: Dayjs;\n  selectedDate: Dayjs;\n  onDateSelect: (selectedDay: string, selectedMonth: string, selectedYear: string) => void;\n}\n\nfunction Calendar(props: CalendaProps): JSX.Element{\n\n  const currentYear = props.currentDate.format('YYYY');\n  const [selectedDay, setDay] = useState<string>(props.selectedDate.format('D'));\n  const [selectedMonth, setMonth] = useState<string>(props.selectedDate.format('M'));\n  const [selectedYear, setYear] = useState<string>(props.selectedDate.format('YYYY'));\n\n  const [totalDaysInAMonth, setTotalDaysInAMonth] = useState<number>(props.selectedDate.daysInMonth());\n  const [firstDayOfTheMonth, setfirstDayOfTheMonth] = useState<Dayjs>(props.selectedDate.startOf('month'));\n\n  const[showYears, toggleShowYears] = useState<Boolean>(false)\n  const[showMonths, toggleShowMonths] = useState<Boolean>(false)\n  const[showDates, toggleShowDates] = useState<Boolean>(true)\n  \n  const[newDateSelected, toggleNewDateSelected] = useState<Boolean>(false)\n\n  const selectedMonthAbbr: string = dayjs().month(parseInt(selectedMonth) - 1).format('MMM');\n\n\n  useEffect(() =>{\n    if(showYears){\n      toggleShowDates(false);\n      toggleShowMonths(false);\n    }\n\n    if(!showYears && !showMonths)\n      toggleShowDates(true);\n\n  }, [showYears])\n\n  useEffect(() =>{\n    if(showMonths){\n      toggleShowDates(false);\n      toggleShowYears(false);\n    }\n\n    if(!showYears && !showMonths)\n      toggleShowDates(true);\n\n  }, [showMonths])\n\n  useEffect(() =>{\n    if(showDates){\n      toggleShowMonths(false);\n      toggleShowYears(false);\n    }\n  }, [showDates])\n\n\n  useEffectUpdate(() => {\n    props.onDateSelect(selectedDay, selectedMonth, selectedYear);\n  }, [newDateSelected]);\n\n  useEffectUpdate(() => {\n    console.log(totalDaysInAMonth)\n    setTotalDaysInAMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).daysInMonth());\n    setfirstDayOfTheMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).startOf('month'));\n  }, [selectedYear]);\n\n  useEffectUpdate(() => {\n    setTotalDaysInAMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).daysInMonth());\n    setfirstDayOfTheMonth(dayjs(`${selectedYear}-${selectedMonth}-${selectedDay}`).startOf('month'));\n  }, [selectedMonth]);\n\n  const onDateSelect = (day: string): void => {\n    setDay(day)\n    toggleNewDateSelected(true);\n  }\n\n  const onMonthSelect = (month: string): void => {\n    setMonth(month);\n    toggleShowMonths(false)\n    toggleShowDates(true)\n  }\n\n  const onYearSelect = (year: string): void => {\n    setYear(year)\n    toggleShowDates(true)\n  }  \n\n  return(\n    <div className=\"flex flex-col\">  \n      <div className=\"flex shadow-lg justify-center w-full p-1\">\n        <button className=\"p-1.5\" onClick={e => {\n          toggleShowMonths(!showMonths)\n          }}>{selectedMonthAbbr}\n          </button>\n          \n        <button className=\"p-1.5\" onClick={e => {\n          toggleShowYears(!showYears)\n          }}>{selectedYear}\n          </button>\n      </div>\n\n      {showDates && <DateSelect currentDate = {props.currentDate} selectedDate={props.selectedDate} selectedDay={selectedDay} selectedMonth={selectedMonth} selectedYear={selectedYear} totalDaysInAMonth={totalDaysInAMonth} firstDayOfTheMonth={firstDayOfTheMonth} onDateSelect={onDateSelect}/>}\n      {showMonths && <MonthSelect selectedMonth={selectedMonth} onMonthSelect= {onMonthSelect}/>}\n      {showYears && <YearSelect currentYear = {currentYear} selectedYear={selectedYear} onYearSelect={onYearSelect}/>}\n    </div>\n  );\n}\n\nexport default Calendar;","import React, {useState, useEffect} from 'react'\nimport Calendar from '../calendar'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\n\n\ndayjs.extend(customParseFormat)\n\nfunction DatePicker(): JSX.Element{\n\n  const [showCalendar, toggleShowCalendar] = useState<Boolean>(false)\n\n  const currentDate = dayjs();\n  const [selectedDate, setSelectedDate] = useState(currentDate)\n\n  const onDateSelect = (day: string, month: string, year: string) =>{\n    setSelectedDate(dayjs(`${year}-${month}-${day}`, \"YYYY/M/D\"))\n    toggleShowCalendar(!showCalendar)\n  }\n  return (\n    <div className=\"w-72\">\n      <input name=\"date\" className = \"bg-white border-black border-2 h-8 rounded-lg p-2 w-full\" autoComplete=\"off\" value={selectedDate.format(\"YYYY/M/D\")} onClick = { e => {\n        toggleShowCalendar(!showCalendar)\n      }} />\n      {showCalendar && <Calendar currentDate={currentDate} selectedDate={selectedDate} onDateSelect = {onDateSelect}/>}\n    </div>\n  )\n}\n\nexport default DatePicker;","import React from 'react';\nimport DatePicker from './components/datepicker'\n\nfunction App() {\n  \n  return (\n    <div className=\"flex container mt-10 justify-center\">\n      <DatePicker/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}